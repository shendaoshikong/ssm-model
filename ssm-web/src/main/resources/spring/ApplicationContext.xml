<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	http://www.springframework.org/schema/util
	http://www.springframework.org/schema/util/spring-util-4.0.xsd">

    <!-- 数据库连接池 -->
    <!-- 加载配置文件 -->
    <context:property-placeholder location="classpath:conf/DruidDataSource.properties"/>
    <!-- 数据库连接池 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          destroy-method="close">
        <property name="url" value="jdbc:mysql://${jdbc.host}:${jdbc.port}/${jdbc.dbname}?useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNull"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name = "filters" value = "${filters}" />
        <!-- 最大并发连接数 -->
        <property name = "maxActive" value = "${maxActive}" />
        <!-- 初始化连接数量 -->
        <property name = "initialSize" value = "${initialSize}" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name = "maxWait" value = "${maxWait}" />
        <!-- 最小空闲连接数 -->
        <property name = "minIdle" value = "${minIdle}" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name = "timeBetweenEvictionRunsMillis" value ="${timeBetweenEvictionRunsMillis}" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name = "minEvictableIdleTimeMillis" value ="${minEvictableIdleTimeMillis}" />
        <!--        <property name = "validationQuery" value = "${validationQuery}" />     -->
        <property name = "testWhileIdle" value = "${testWhileIdle}" />
        <property name = "testOnBorrow" value = "${testOnBorrow}" />
        <property name = "testOnReturn" value = "${testOnReturn}" />
        <property name = "maxOpenPreparedStatements" value ="${maxOpenPreparedStatements}" />
        <!-- 打开 removeAbandoned 功能 -->
        <property name = "removeAbandoned" value = "${removeAbandoned}" />
        <!-- 1800 秒，也就是 30 分钟 -->
        <property name = "removeAbandonedTimeout" value ="${removeAbandonedTimeout}" />
        <!-- 关闭 abanded 连接时输出错误日志 -->
        <property name = "logAbandoned" value = "${logAbandoned}" />
        <property name="proxyFilters">
            <list>
                <ref bean="wall-filter"/>
                <ref bean="stat-filter"/>
                <ref bean="log-filter"/>
            </list>
        </property>
    </bean>

    <!-- 慢SQL记录 -->
    <bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
        <!-- 慢sql时间设置,即执行时间大于200毫秒的都是慢sql -->
        <property name="slowSqlMillis" value="2000"/>
        <property name="logSlowSql" value="true"/>
    </bean>

    <bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4jFilter">
        <property name="dataSourceLogEnabled" value="true" />
        <property name="statementExecutableSqlLogEnable" value="true" />
    </bean>

    <!-- 防御SQL攻击 -->
    <bean id="wall-filter" class="com.alibaba.druid.wall.WallFilter">
        <property name="config" ref="wall-config" />
        <property name="logViolation" value="true" />
        <!--         <property name="throwException" value="false" />   -->
    </bean>

    <bean id="wall-config" class="com.alibaba.druid.wall.WallConfig">
        <property name="deleteAllow" value="false" />
        <property name="truncateAllow" value="false" />
        <property name="dropTableAllow" value="false" />
        <property name="alterTableAllow" value="false" />
        <property name="deleteWhereNoneCheck" value="false" />
        <property name="updateWhereNoneCheck" value="false" />
    </bean>

    <!-- Druid提供了Spring和Jdbc的关联监控 -->
    <!--1,按类型拦截配置-->
    <!--<bean id="druid-stat-interceptor"-->
          <!--class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">-->
    <!--</bean>-->

    <!--<bean id="druid-type-proxyCreator" class="com.alibaba.druid.support.spring.stat.BeanTypeAutoProxyCreator">-->
        <!--&lt;!&ndash; 所有ABCInterface的派生类被拦截监控  &ndash;&gt;-->
        <!--<property name="targetBeanType" value="xxxx.ABCInterface" />-->
        <!--<property name="interceptorNames">-->
            <!--<list>-->
                <!--<value>druid-stat-interceptor</value>-->
            <!--</list>-->
        <!--</property>-->
    <!--</bean>-->

    <!--2,方法名正则匹配拦截配置-->
    <!--<bean id="druid-stat-interceptor"-->
          <!--class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">-->
    <!--</bean>-->

    <!--<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut"-->
          <!--scope="prototype">-->
        <!--<property name="patterns">-->
            <!--<list>-->
                <!--<value>com.czp.service.*</value>-->
                <!--<value>com.czp.mapper.*</value>-->
            <!--</list>-->
        <!--</property>-->
    <!--</bean>-->

    <!-- 创建基于类的代理 -->
    <!--有些情况下，可能你需要配置proxy-target-class，例如：-->
    <!--<aop:config proxy-target-class="true">-->
        <!--<aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut" />-->
    <!--</aop:config>-->

    <!--3,按照BeanId来拦截配置-->
    <!--<bean id="druid-stat-interceptor"-->
          <!--class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">-->
    <!--</bean>-->

    <!--<bean-->
            <!--class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">-->
        <!--<property name="proxyTargetClass" value="true" />-->
        <!--<property name="beanNames">-->
            <!--<list>-->
                <!--&lt;!&ndash; 这里配置需要拦截的bean id列表 &ndash;&gt;-->
                <!--<value>xxx-dao</value>-->
                <!--<value>xxx-service</value>-->
            <!--</list>-->
        <!--</property>-->
        <!--<property name="interceptorNames">-->
            <!--<list>-->
                <!--<value>druid-stat-interceptor</value>-->
            <!--</list>-->
        <!--</property>-->
    <!--</bean>-->


    <!-- druid  spring监控   end -->




    <!-- 配置dao层扫描器，加载mapper代理对象-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.czp.mapper" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>

    <!-- 配置MyBatis工厂SqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--注入数据源 -->
        <property name="dataSource" ref="dataSource" />
        <!-- 自动扫描Mybatis的Mapper.xml文件 -->
        <property name="mapperLocations" value="classpath:com/czp/mapper/*.xml" />
        <!--指定MyBatis核心配置文件位置 -->
        <property name="configLocation" value="classpath:mybatis/SqlMapConfig.xml" />
    </bean>

    <!-- 扫描Service -->
    <context:component-scan base-package="com.czp.service" />

    <!-- 事务管理器 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- 数据源 -->
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- 通知 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- 传播行为 -->
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="insert*" propagation="REQUIRED"/>
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="create*" propagation="REQUIRED"/>
            <tx:method name="delete*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="select*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
        </tx:attributes>
    </tx:advice>
    <!-- 切面 -->
    <!--<aop:config>-->
    <!--<aop:advisor advice-ref="txAdvice"-->
    <!--pointcut="execution(* cn.william.service.*.*(..))"/>-->
    <!--</aop:config>-->

</beans>